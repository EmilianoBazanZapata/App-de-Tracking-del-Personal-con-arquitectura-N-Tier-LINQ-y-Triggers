#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Tracking")]
	public partial class EmployeeDataClassDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definiciones de métodos de extensibilidad
    partial void OnCreated();
    partial void InsertDEPARTAMENTS(DEPARTAMENTS instance);
    partial void UpdateDEPARTAMENTS(DEPARTAMENTS instance);
    partial void DeleteDEPARTAMENTS(DEPARTAMENTS instance);
    partial void InsertUSERS(USERS instance);
    partial void UpdateUSERS(USERS instance);
    partial void DeleteUSERS(USERS instance);
    partial void InsertMONTHS(MONTHS instance);
    partial void UpdateMONTHS(MONTHS instance);
    partial void DeleteMONTHS(MONTHS instance);
    partial void InsertPERMISSIONS(PERMISSIONS instance);
    partial void UpdatePERMISSIONS(PERMISSIONS instance);
    partial void DeletePERMISSIONS(PERMISSIONS instance);
    partial void InsertPOSITIONS(POSITIONS instance);
    partial void UpdatePOSITIONS(POSITIONS instance);
    partial void DeletePOSITIONS(POSITIONS instance);
    partial void InsertSALARIES(SALARIES instance);
    partial void UpdateSALARIES(SALARIES instance);
    partial void DeleteSALARIES(SALARIES instance);
    partial void InsertSTATES(STATES instance);
    partial void UpdateSTATES(STATES instance);
    partial void DeleteSTATES(STATES instance);
    partial void InsertSTATETS_PERMISSIONS(STATETS_PERMISSIONS instance);
    partial void UpdateSTATETS_PERMISSIONS(STATETS_PERMISSIONS instance);
    partial void DeleteSTATETS_PERMISSIONS(STATETS_PERMISSIONS instance);
    partial void InsertTASKS(TASKS instance);
    partial void UpdateTASKS(TASKS instance);
    partial void DeleteTASKS(TASKS instance);
    #endregion
		
		public EmployeeDataClassDataContext() : 
				base(global::DAL.Properties.Settings.Default.TrackingConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public EmployeeDataClassDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EmployeeDataClassDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EmployeeDataClassDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EmployeeDataClassDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DEPARTAMENTS> DEPARTAMENTS
		{
			get
			{
				return this.GetTable<DEPARTAMENTS>();
			}
		}
		
		public System.Data.Linq.Table<USERS> USERS
		{
			get
			{
				return this.GetTable<USERS>();
			}
		}
		
		public System.Data.Linq.Table<MONTHS> MONTHS
		{
			get
			{
				return this.GetTable<MONTHS>();
			}
		}
		
		public System.Data.Linq.Table<PERMISSIONS> PERMISSIONS
		{
			get
			{
				return this.GetTable<PERMISSIONS>();
			}
		}
		
		public System.Data.Linq.Table<POSITIONS> POSITIONS
		{
			get
			{
				return this.GetTable<POSITIONS>();
			}
		}
		
		public System.Data.Linq.Table<SALARIES> SALARIES
		{
			get
			{
				return this.GetTable<SALARIES>();
			}
		}
		
		public System.Data.Linq.Table<STATES> STATES
		{
			get
			{
				return this.GetTable<STATES>();
			}
		}
		
		public System.Data.Linq.Table<STATETS_PERMISSIONS> STATETS_PERMISSIONS
		{
			get
			{
				return this.GetTable<STATETS_PERMISSIONS>();
			}
		}
		
		public System.Data.Linq.Table<TASKS> TASKS
		{
			get
			{
				return this.GetTable<TASKS>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DEPARTAMENTS")]
	public partial class DEPARTAMENTS : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _DEPARTAMENT_NAME;
		
		private EntitySet<USERS> _USERS;
		
		private EntitySet<POSITIONS> _POSITIONS;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDEPARTAMENT_NAMEChanging(string value);
    partial void OnDEPARTAMENT_NAMEChanged();
    #endregion
		
		public DEPARTAMENTS()
		{
			this._USERS = new EntitySet<USERS>(new Action<USERS>(this.attach_USERS), new Action<USERS>(this.detach_USERS));
			this._POSITIONS = new EntitySet<POSITIONS>(new Action<POSITIONS>(this.attach_POSITIONS), new Action<POSITIONS>(this.detach_POSITIONS));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DEPARTAMENT_NAME", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string DEPARTAMENT_NAME
		{
			get
			{
				return this._DEPARTAMENT_NAME;
			}
			set
			{
				if ((this._DEPARTAMENT_NAME != value))
				{
					this.OnDEPARTAMENT_NAMEChanging(value);
					this.SendPropertyChanging();
					this._DEPARTAMENT_NAME = value;
					this.SendPropertyChanged("DEPARTAMENT_NAME");
					this.OnDEPARTAMENT_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DEPARTAMENTS_USERS", Storage="_USERS", ThisKey="ID", OtherKey="DEPARTAMENT_ID")]
		public EntitySet<USERS> USERS
		{
			get
			{
				return this._USERS;
			}
			set
			{
				this._USERS.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DEPARTAMENTS_POSITIONS", Storage="_POSITIONS", ThisKey="ID", OtherKey="DEPARTAMENT_ID")]
		public EntitySet<POSITIONS> POSITIONS
		{
			get
			{
				return this._POSITIONS;
			}
			set
			{
				this._POSITIONS.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_USERS(USERS entity)
		{
			this.SendPropertyChanging();
			entity.DEPARTAMENTS = this;
		}
		
		private void detach_USERS(USERS entity)
		{
			this.SendPropertyChanging();
			entity.DEPARTAMENTS = null;
		}
		
		private void attach_POSITIONS(POSITIONS entity)
		{
			this.SendPropertyChanging();
			entity.DEPARTAMENTS = this;
		}
		
		private void detach_POSITIONS(POSITIONS entity)
		{
			this.SendPropertyChanging();
			entity.DEPARTAMENTS = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.USERS")]
	public partial class USERS : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _USER_NO;
		
		private string _NAME;
		
		private string _SURNAME;
		
		private string _IMAGE_PATH;
		
		private int _DEPARTAMENT_ID;
		
		private double _SALARY;
		
		private string _ADRESS;
		
		private System.DateTime _BIRTH_DAY;
		
		private string _PASSWORD;
		
		private bool _IS_ADMIN;
		
		private EntitySet<PERMISSIONS> _PERMISSIONS;
		
		private EntitySet<SALARIES> _SALARIES;
		
		private EntitySet<TASKS> _TASKS;
		
		private EntityRef<DEPARTAMENTS> _DEPARTAMENTS;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUSER_NOChanging(int value);
    partial void OnUSER_NOChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    partial void OnSURNAMEChanging(string value);
    partial void OnSURNAMEChanged();
    partial void OnIMAGE_PATHChanging(string value);
    partial void OnIMAGE_PATHChanged();
    partial void OnDEPARTAMENT_IDChanging(int value);
    partial void OnDEPARTAMENT_IDChanged();
    partial void OnSALARYChanging(double value);
    partial void OnSALARYChanged();
    partial void OnADRESSChanging(string value);
    partial void OnADRESSChanged();
    partial void OnBIRTH_DAYChanging(System.DateTime value);
    partial void OnBIRTH_DAYChanged();
    partial void OnPASSWORDChanging(string value);
    partial void OnPASSWORDChanged();
    partial void OnIS_ADMINChanging(bool value);
    partial void OnIS_ADMINChanged();
    #endregion
		
		public USERS()
		{
			this._PERMISSIONS = new EntitySet<PERMISSIONS>(new Action<PERMISSIONS>(this.attach_PERMISSIONS), new Action<PERMISSIONS>(this.detach_PERMISSIONS));
			this._SALARIES = new EntitySet<SALARIES>(new Action<SALARIES>(this.attach_SALARIES), new Action<SALARIES>(this.detach_SALARIES));
			this._TASKS = new EntitySet<TASKS>(new Action<TASKS>(this.attach_TASKS), new Action<TASKS>(this.detach_TASKS));
			this._DEPARTAMENTS = default(EntityRef<DEPARTAMENTS>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_USER_NO", DbType="Int NOT NULL")]
		public int USER_NO
		{
			get
			{
				return this._USER_NO;
			}
			set
			{
				if ((this._USER_NO != value))
				{
					this.OnUSER_NOChanging(value);
					this.SendPropertyChanging();
					this._USER_NO = value;
					this.SendPropertyChanged("USER_NO");
					this.OnUSER_NOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SURNAME", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SURNAME
		{
			get
			{
				return this._SURNAME;
			}
			set
			{
				if ((this._SURNAME != value))
				{
					this.OnSURNAMEChanging(value);
					this.SendPropertyChanging();
					this._SURNAME = value;
					this.SendPropertyChanged("SURNAME");
					this.OnSURNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IMAGE_PATH", DbType="NVarChar(MAX)")]
		public string IMAGE_PATH
		{
			get
			{
				return this._IMAGE_PATH;
			}
			set
			{
				if ((this._IMAGE_PATH != value))
				{
					this.OnIMAGE_PATHChanging(value);
					this.SendPropertyChanging();
					this._IMAGE_PATH = value;
					this.SendPropertyChanged("IMAGE_PATH");
					this.OnIMAGE_PATHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DEPARTAMENT_ID", DbType="Int NOT NULL")]
		public int DEPARTAMENT_ID
		{
			get
			{
				return this._DEPARTAMENT_ID;
			}
			set
			{
				if ((this._DEPARTAMENT_ID != value))
				{
					if (this._DEPARTAMENTS.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDEPARTAMENT_IDChanging(value);
					this.SendPropertyChanging();
					this._DEPARTAMENT_ID = value;
					this.SendPropertyChanged("DEPARTAMENT_ID");
					this.OnDEPARTAMENT_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SALARY", DbType="Float NOT NULL")]
		public double SALARY
		{
			get
			{
				return this._SALARY;
			}
			set
			{
				if ((this._SALARY != value))
				{
					this.OnSALARYChanging(value);
					this.SendPropertyChanging();
					this._SALARY = value;
					this.SendPropertyChanged("SALARY");
					this.OnSALARYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ADRESS", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ADRESS
		{
			get
			{
				return this._ADRESS;
			}
			set
			{
				if ((this._ADRESS != value))
				{
					this.OnADRESSChanging(value);
					this.SendPropertyChanging();
					this._ADRESS = value;
					this.SendPropertyChanged("ADRESS");
					this.OnADRESSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BIRTH_DAY", DbType="DateTime NOT NULL")]
		public System.DateTime BIRTH_DAY
		{
			get
			{
				return this._BIRTH_DAY;
			}
			set
			{
				if ((this._BIRTH_DAY != value))
				{
					this.OnBIRTH_DAYChanging(value);
					this.SendPropertyChanging();
					this._BIRTH_DAY = value;
					this.SendPropertyChanged("BIRTH_DAY");
					this.OnBIRTH_DAYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PASSWORD", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string PASSWORD
		{
			get
			{
				return this._PASSWORD;
			}
			set
			{
				if ((this._PASSWORD != value))
				{
					this.OnPASSWORDChanging(value);
					this.SendPropertyChanging();
					this._PASSWORD = value;
					this.SendPropertyChanged("PASSWORD");
					this.OnPASSWORDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IS_ADMIN", DbType="Bit NOT NULL")]
		public bool IS_ADMIN
		{
			get
			{
				return this._IS_ADMIN;
			}
			set
			{
				if ((this._IS_ADMIN != value))
				{
					this.OnIS_ADMINChanging(value);
					this.SendPropertyChanging();
					this._IS_ADMIN = value;
					this.SendPropertyChanged("IS_ADMIN");
					this.OnIS_ADMINChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USERS_PERMISSIONS", Storage="_PERMISSIONS", ThisKey="ID", OtherKey="EMPLOYEE_ID")]
		public EntitySet<PERMISSIONS> PERMISSIONS
		{
			get
			{
				return this._PERMISSIONS;
			}
			set
			{
				this._PERMISSIONS.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USERS_SALARIES", Storage="_SALARIES", ThisKey="ID", OtherKey="EMPLOYEE_ID")]
		public EntitySet<SALARIES> SALARIES
		{
			get
			{
				return this._SALARIES;
			}
			set
			{
				this._SALARIES.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USERS_TASKS", Storage="_TASKS", ThisKey="ID", OtherKey="EMPLOYEE_ID")]
		public EntitySet<TASKS> TASKS
		{
			get
			{
				return this._TASKS;
			}
			set
			{
				this._TASKS.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DEPARTAMENTS_USERS", Storage="_DEPARTAMENTS", ThisKey="DEPARTAMENT_ID", OtherKey="ID", IsForeignKey=true)]
		public DEPARTAMENTS DEPARTAMENTS
		{
			get
			{
				return this._DEPARTAMENTS.Entity;
			}
			set
			{
				DEPARTAMENTS previousValue = this._DEPARTAMENTS.Entity;
				if (((previousValue != value) 
							|| (this._DEPARTAMENTS.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DEPARTAMENTS.Entity = null;
						previousValue.USERS.Remove(this);
					}
					this._DEPARTAMENTS.Entity = value;
					if ((value != null))
					{
						value.USERS.Add(this);
						this._DEPARTAMENT_ID = value.ID;
					}
					else
					{
						this._DEPARTAMENT_ID = default(int);
					}
					this.SendPropertyChanged("DEPARTAMENTS");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PERMISSIONS(PERMISSIONS entity)
		{
			this.SendPropertyChanging();
			entity.USERS = this;
		}
		
		private void detach_PERMISSIONS(PERMISSIONS entity)
		{
			this.SendPropertyChanging();
			entity.USERS = null;
		}
		
		private void attach_SALARIES(SALARIES entity)
		{
			this.SendPropertyChanging();
			entity.USERS = this;
		}
		
		private void detach_SALARIES(SALARIES entity)
		{
			this.SendPropertyChanging();
			entity.USERS = null;
		}
		
		private void attach_TASKS(TASKS entity)
		{
			this.SendPropertyChanging();
			entity.USERS = this;
		}
		
		private void detach_TASKS(TASKS entity)
		{
			this.SendPropertyChanging();
			entity.USERS = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MONTHS")]
	public partial class MONTHS : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _MONTH_NAME;
		
		private EntitySet<SALARIES> _SALARIES;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMONTH_NAMEChanging(string value);
    partial void OnMONTH_NAMEChanged();
    #endregion
		
		public MONTHS()
		{
			this._SALARIES = new EntitySet<SALARIES>(new Action<SALARIES>(this.attach_SALARIES), new Action<SALARIES>(this.detach_SALARIES));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MONTH_NAME", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MONTH_NAME
		{
			get
			{
				return this._MONTH_NAME;
			}
			set
			{
				if ((this._MONTH_NAME != value))
				{
					this.OnMONTH_NAMEChanging(value);
					this.SendPropertyChanging();
					this._MONTH_NAME = value;
					this.SendPropertyChanged("MONTH_NAME");
					this.OnMONTH_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MONTHS_SALARIES", Storage="_SALARIES", ThisKey="ID", OtherKey="MONTH_ID")]
		public EntitySet<SALARIES> SALARIES
		{
			get
			{
				return this._SALARIES;
			}
			set
			{
				this._SALARIES.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SALARIES(SALARIES entity)
		{
			this.SendPropertyChanging();
			entity.MONTHS = this;
		}
		
		private void detach_SALARIES(SALARIES entity)
		{
			this.SendPropertyChanging();
			entity.MONTHS = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PERMISSIONS")]
	public partial class PERMISSIONS : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _EMPLOYEE_ID;
		
		private System.DateTime _PERMISSION_START_DATE;
		
		private System.DateTime _PERMISSION_END_DATE;
		
		private int _PERMISSION_STATE;
		
		private string _PERMISSION_EXPLANATION;
		
		private int _PERMISSION_DAY;
		
		private EntityRef<USERS> _USERS;
		
		private EntityRef<STATETS_PERMISSIONS> _STATETS_PERMISSIONS;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEMPLOYEE_IDChanging(int value);
    partial void OnEMPLOYEE_IDChanged();
    partial void OnPERMISSION_START_DATEChanging(System.DateTime value);
    partial void OnPERMISSION_START_DATEChanged();
    partial void OnPERMISSION_END_DATEChanging(System.DateTime value);
    partial void OnPERMISSION_END_DATEChanged();
    partial void OnPERMISSION_STATEChanging(int value);
    partial void OnPERMISSION_STATEChanged();
    partial void OnPERMISSION_EXPLANATIONChanging(string value);
    partial void OnPERMISSION_EXPLANATIONChanged();
    partial void OnPERMISSION_DAYChanging(int value);
    partial void OnPERMISSION_DAYChanged();
    #endregion
		
		public PERMISSIONS()
		{
			this._USERS = default(EntityRef<USERS>);
			this._STATETS_PERMISSIONS = default(EntityRef<STATETS_PERMISSIONS>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMPLOYEE_ID", DbType="Int NOT NULL")]
		public int EMPLOYEE_ID
		{
			get
			{
				return this._EMPLOYEE_ID;
			}
			set
			{
				if ((this._EMPLOYEE_ID != value))
				{
					if (this._USERS.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEMPLOYEE_IDChanging(value);
					this.SendPropertyChanging();
					this._EMPLOYEE_ID = value;
					this.SendPropertyChanged("EMPLOYEE_ID");
					this.OnEMPLOYEE_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PERMISSION_START_DATE", DbType="DateTime NOT NULL")]
		public System.DateTime PERMISSION_START_DATE
		{
			get
			{
				return this._PERMISSION_START_DATE;
			}
			set
			{
				if ((this._PERMISSION_START_DATE != value))
				{
					this.OnPERMISSION_START_DATEChanging(value);
					this.SendPropertyChanging();
					this._PERMISSION_START_DATE = value;
					this.SendPropertyChanged("PERMISSION_START_DATE");
					this.OnPERMISSION_START_DATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PERMISSION_END_DATE", DbType="DateTime NOT NULL")]
		public System.DateTime PERMISSION_END_DATE
		{
			get
			{
				return this._PERMISSION_END_DATE;
			}
			set
			{
				if ((this._PERMISSION_END_DATE != value))
				{
					this.OnPERMISSION_END_DATEChanging(value);
					this.SendPropertyChanging();
					this._PERMISSION_END_DATE = value;
					this.SendPropertyChanged("PERMISSION_END_DATE");
					this.OnPERMISSION_END_DATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PERMISSION_STATE", DbType="Int NOT NULL")]
		public int PERMISSION_STATE
		{
			get
			{
				return this._PERMISSION_STATE;
			}
			set
			{
				if ((this._PERMISSION_STATE != value))
				{
					if (this._STATETS_PERMISSIONS.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPERMISSION_STATEChanging(value);
					this.SendPropertyChanging();
					this._PERMISSION_STATE = value;
					this.SendPropertyChanged("PERMISSION_STATE");
					this.OnPERMISSION_STATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PERMISSION_EXPLANATION", DbType="NVarChar(MAX)")]
		public string PERMISSION_EXPLANATION
		{
			get
			{
				return this._PERMISSION_EXPLANATION;
			}
			set
			{
				if ((this._PERMISSION_EXPLANATION != value))
				{
					this.OnPERMISSION_EXPLANATIONChanging(value);
					this.SendPropertyChanging();
					this._PERMISSION_EXPLANATION = value;
					this.SendPropertyChanged("PERMISSION_EXPLANATION");
					this.OnPERMISSION_EXPLANATIONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PERMISSION_DAY", DbType="Int NOT NULL")]
		public int PERMISSION_DAY
		{
			get
			{
				return this._PERMISSION_DAY;
			}
			set
			{
				if ((this._PERMISSION_DAY != value))
				{
					this.OnPERMISSION_DAYChanging(value);
					this.SendPropertyChanging();
					this._PERMISSION_DAY = value;
					this.SendPropertyChanged("PERMISSION_DAY");
					this.OnPERMISSION_DAYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USERS_PERMISSIONS", Storage="_USERS", ThisKey="EMPLOYEE_ID", OtherKey="ID", IsForeignKey=true)]
		public USERS USERS
		{
			get
			{
				return this._USERS.Entity;
			}
			set
			{
				USERS previousValue = this._USERS.Entity;
				if (((previousValue != value) 
							|| (this._USERS.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USERS.Entity = null;
						previousValue.PERMISSIONS.Remove(this);
					}
					this._USERS.Entity = value;
					if ((value != null))
					{
						value.PERMISSIONS.Add(this);
						this._EMPLOYEE_ID = value.ID;
					}
					else
					{
						this._EMPLOYEE_ID = default(int);
					}
					this.SendPropertyChanged("USERS");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STATETS_PERMISSIONS_PERMISSIONS", Storage="_STATETS_PERMISSIONS", ThisKey="PERMISSION_STATE", OtherKey="ID", IsForeignKey=true)]
		public STATETS_PERMISSIONS STATETS_PERMISSIONS
		{
			get
			{
				return this._STATETS_PERMISSIONS.Entity;
			}
			set
			{
				STATETS_PERMISSIONS previousValue = this._STATETS_PERMISSIONS.Entity;
				if (((previousValue != value) 
							|| (this._STATETS_PERMISSIONS.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._STATETS_PERMISSIONS.Entity = null;
						previousValue.PERMISSIONS.Remove(this);
					}
					this._STATETS_PERMISSIONS.Entity = value;
					if ((value != null))
					{
						value.PERMISSIONS.Add(this);
						this._PERMISSION_STATE = value.ID;
					}
					else
					{
						this._PERMISSION_STATE = default(int);
					}
					this.SendPropertyChanged("STATETS_PERMISSIONS");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.POSITIONS")]
	public partial class POSITIONS : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _POSITION_NAME;
		
		private System.Nullable<int> _DEPARTAMENT_ID;
		
		private EntityRef<DEPARTAMENTS> _DEPARTAMENTS;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPOSITION_NAMEChanging(string value);
    partial void OnPOSITION_NAMEChanged();
    partial void OnDEPARTAMENT_IDChanging(System.Nullable<int> value);
    partial void OnDEPARTAMENT_IDChanged();
    #endregion
		
		public POSITIONS()
		{
			this._DEPARTAMENTS = default(EntityRef<DEPARTAMENTS>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_POSITION_NAME", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string POSITION_NAME
		{
			get
			{
				return this._POSITION_NAME;
			}
			set
			{
				if ((this._POSITION_NAME != value))
				{
					this.OnPOSITION_NAMEChanging(value);
					this.SendPropertyChanging();
					this._POSITION_NAME = value;
					this.SendPropertyChanged("POSITION_NAME");
					this.OnPOSITION_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DEPARTAMENT_ID", DbType="Int")]
		public System.Nullable<int> DEPARTAMENT_ID
		{
			get
			{
				return this._DEPARTAMENT_ID;
			}
			set
			{
				if ((this._DEPARTAMENT_ID != value))
				{
					if (this._DEPARTAMENTS.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDEPARTAMENT_IDChanging(value);
					this.SendPropertyChanging();
					this._DEPARTAMENT_ID = value;
					this.SendPropertyChanged("DEPARTAMENT_ID");
					this.OnDEPARTAMENT_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DEPARTAMENTS_POSITIONS", Storage="_DEPARTAMENTS", ThisKey="DEPARTAMENT_ID", OtherKey="ID", IsForeignKey=true)]
		public DEPARTAMENTS DEPARTAMENTS
		{
			get
			{
				return this._DEPARTAMENTS.Entity;
			}
			set
			{
				DEPARTAMENTS previousValue = this._DEPARTAMENTS.Entity;
				if (((previousValue != value) 
							|| (this._DEPARTAMENTS.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DEPARTAMENTS.Entity = null;
						previousValue.POSITIONS.Remove(this);
					}
					this._DEPARTAMENTS.Entity = value;
					if ((value != null))
					{
						value.POSITIONS.Add(this);
						this._DEPARTAMENT_ID = value.ID;
					}
					else
					{
						this._DEPARTAMENT_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("DEPARTAMENTS");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SALARIES")]
	public partial class SALARIES : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _EMPLOYEE_ID;
		
		private int _AMOUNT;
		
		private int _YEAR;
		
		private int _MONTH_ID;
		
		private EntityRef<MONTHS> _MONTHS;
		
		private EntityRef<USERS> _USERS;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEMPLOYEE_IDChanging(int value);
    partial void OnEMPLOYEE_IDChanged();
    partial void OnAMOUNTChanging(int value);
    partial void OnAMOUNTChanged();
    partial void OnYEARChanging(int value);
    partial void OnYEARChanged();
    partial void OnMONTH_IDChanging(int value);
    partial void OnMONTH_IDChanged();
    #endregion
		
		public SALARIES()
		{
			this._MONTHS = default(EntityRef<MONTHS>);
			this._USERS = default(EntityRef<USERS>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMPLOYEE_ID", DbType="Int NOT NULL")]
		public int EMPLOYEE_ID
		{
			get
			{
				return this._EMPLOYEE_ID;
			}
			set
			{
				if ((this._EMPLOYEE_ID != value))
				{
					if (this._USERS.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEMPLOYEE_IDChanging(value);
					this.SendPropertyChanging();
					this._EMPLOYEE_ID = value;
					this.SendPropertyChanged("EMPLOYEE_ID");
					this.OnEMPLOYEE_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AMOUNT", DbType="Int NOT NULL")]
		public int AMOUNT
		{
			get
			{
				return this._AMOUNT;
			}
			set
			{
				if ((this._AMOUNT != value))
				{
					this.OnAMOUNTChanging(value);
					this.SendPropertyChanging();
					this._AMOUNT = value;
					this.SendPropertyChanged("AMOUNT");
					this.OnAMOUNTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YEAR", DbType="Int NOT NULL")]
		public int YEAR
		{
			get
			{
				return this._YEAR;
			}
			set
			{
				if ((this._YEAR != value))
				{
					this.OnYEARChanging(value);
					this.SendPropertyChanging();
					this._YEAR = value;
					this.SendPropertyChanged("YEAR");
					this.OnYEARChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MONTH_ID", DbType="Int NOT NULL")]
		public int MONTH_ID
		{
			get
			{
				return this._MONTH_ID;
			}
			set
			{
				if ((this._MONTH_ID != value))
				{
					if (this._MONTHS.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMONTH_IDChanging(value);
					this.SendPropertyChanging();
					this._MONTH_ID = value;
					this.SendPropertyChanged("MONTH_ID");
					this.OnMONTH_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MONTHS_SALARIES", Storage="_MONTHS", ThisKey="MONTH_ID", OtherKey="ID", IsForeignKey=true)]
		public MONTHS MONTHS
		{
			get
			{
				return this._MONTHS.Entity;
			}
			set
			{
				MONTHS previousValue = this._MONTHS.Entity;
				if (((previousValue != value) 
							|| (this._MONTHS.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MONTHS.Entity = null;
						previousValue.SALARIES.Remove(this);
					}
					this._MONTHS.Entity = value;
					if ((value != null))
					{
						value.SALARIES.Add(this);
						this._MONTH_ID = value.ID;
					}
					else
					{
						this._MONTH_ID = default(int);
					}
					this.SendPropertyChanged("MONTHS");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USERS_SALARIES", Storage="_USERS", ThisKey="EMPLOYEE_ID", OtherKey="ID", IsForeignKey=true)]
		public USERS USERS
		{
			get
			{
				return this._USERS.Entity;
			}
			set
			{
				USERS previousValue = this._USERS.Entity;
				if (((previousValue != value) 
							|| (this._USERS.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USERS.Entity = null;
						previousValue.SALARIES.Remove(this);
					}
					this._USERS.Entity = value;
					if ((value != null))
					{
						value.SALARIES.Add(this);
						this._EMPLOYEE_ID = value.ID;
					}
					else
					{
						this._EMPLOYEE_ID = default(int);
					}
					this.SendPropertyChanged("USERS");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.STATES")]
	public partial class STATES : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _STATE_NAME;
		
		private EntitySet<TASKS> _TASKS;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSTATE_NAMEChanging(string value);
    partial void OnSTATE_NAMEChanged();
    #endregion
		
		public STATES()
		{
			this._TASKS = new EntitySet<TASKS>(new Action<TASKS>(this.attach_TASKS), new Action<TASKS>(this.detach_TASKS));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STATE_NAME", DbType="NVarChar(50)")]
		public string STATE_NAME
		{
			get
			{
				return this._STATE_NAME;
			}
			set
			{
				if ((this._STATE_NAME != value))
				{
					this.OnSTATE_NAMEChanging(value);
					this.SendPropertyChanging();
					this._STATE_NAME = value;
					this.SendPropertyChanged("STATE_NAME");
					this.OnSTATE_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STATES_TASKS", Storage="_TASKS", ThisKey="ID", OtherKey="TASK_STATE")]
		public EntitySet<TASKS> TASKS
		{
			get
			{
				return this._TASKS;
			}
			set
			{
				this._TASKS.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TASKS(TASKS entity)
		{
			this.SendPropertyChanging();
			entity.STATES = this;
		}
		
		private void detach_TASKS(TASKS entity)
		{
			this.SendPropertyChanging();
			entity.STATES = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.STATETS_PERMISSIONS")]
	public partial class STATETS_PERMISSIONS : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _STATE_NAME;
		
		private EntitySet<PERMISSIONS> _PERMISSIONS;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSTATE_NAMEChanging(string value);
    partial void OnSTATE_NAMEChanged();
    #endregion
		
		public STATETS_PERMISSIONS()
		{
			this._PERMISSIONS = new EntitySet<PERMISSIONS>(new Action<PERMISSIONS>(this.attach_PERMISSIONS), new Action<PERMISSIONS>(this.detach_PERMISSIONS));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STATE_NAME", DbType="NVarChar(50)")]
		public string STATE_NAME
		{
			get
			{
				return this._STATE_NAME;
			}
			set
			{
				if ((this._STATE_NAME != value))
				{
					this.OnSTATE_NAMEChanging(value);
					this.SendPropertyChanging();
					this._STATE_NAME = value;
					this.SendPropertyChanged("STATE_NAME");
					this.OnSTATE_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STATETS_PERMISSIONS_PERMISSIONS", Storage="_PERMISSIONS", ThisKey="ID", OtherKey="PERMISSION_STATE")]
		public EntitySet<PERMISSIONS> PERMISSIONS
		{
			get
			{
				return this._PERMISSIONS;
			}
			set
			{
				this._PERMISSIONS.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PERMISSIONS(PERMISSIONS entity)
		{
			this.SendPropertyChanging();
			entity.STATETS_PERMISSIONS = this;
		}
		
		private void detach_PERMISSIONS(PERMISSIONS entity)
		{
			this.SendPropertyChanging();
			entity.STATETS_PERMISSIONS = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TASKS")]
	public partial class TASKS : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _EMPLOYEE_ID;
		
		private string _TASK_TITLE;
		
		private string _TASK_CONTENT;
		
		private System.Nullable<System.DateTime> _TASK_START;
		
		private System.Nullable<System.DateTime> _TASK_DELIVERY_DATE;
		
		private int _TASK_STATE;
		
		private EntityRef<STATES> _STATES;
		
		private EntityRef<USERS> _USERS;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEMPLOYEE_IDChanging(int value);
    partial void OnEMPLOYEE_IDChanged();
    partial void OnTASK_TITLEChanging(string value);
    partial void OnTASK_TITLEChanged();
    partial void OnTASK_CONTENTChanging(string value);
    partial void OnTASK_CONTENTChanged();
    partial void OnTASK_STARTChanging(System.Nullable<System.DateTime> value);
    partial void OnTASK_STARTChanged();
    partial void OnTASK_DELIVERY_DATEChanging(System.Nullable<System.DateTime> value);
    partial void OnTASK_DELIVERY_DATEChanged();
    partial void OnTASK_STATEChanging(int value);
    partial void OnTASK_STATEChanged();
    #endregion
		
		public TASKS()
		{
			this._STATES = default(EntityRef<STATES>);
			this._USERS = default(EntityRef<USERS>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMPLOYEE_ID", DbType="Int NOT NULL")]
		public int EMPLOYEE_ID
		{
			get
			{
				return this._EMPLOYEE_ID;
			}
			set
			{
				if ((this._EMPLOYEE_ID != value))
				{
					if (this._USERS.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEMPLOYEE_IDChanging(value);
					this.SendPropertyChanging();
					this._EMPLOYEE_ID = value;
					this.SendPropertyChanged("EMPLOYEE_ID");
					this.OnEMPLOYEE_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TASK_TITLE", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string TASK_TITLE
		{
			get
			{
				return this._TASK_TITLE;
			}
			set
			{
				if ((this._TASK_TITLE != value))
				{
					this.OnTASK_TITLEChanging(value);
					this.SendPropertyChanging();
					this._TASK_TITLE = value;
					this.SendPropertyChanged("TASK_TITLE");
					this.OnTASK_TITLEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TASK_CONTENT", DbType="NVarChar(MAX)")]
		public string TASK_CONTENT
		{
			get
			{
				return this._TASK_CONTENT;
			}
			set
			{
				if ((this._TASK_CONTENT != value))
				{
					this.OnTASK_CONTENTChanging(value);
					this.SendPropertyChanging();
					this._TASK_CONTENT = value;
					this.SendPropertyChanged("TASK_CONTENT");
					this.OnTASK_CONTENTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TASK_START", DbType="DateTime")]
		public System.Nullable<System.DateTime> TASK_START
		{
			get
			{
				return this._TASK_START;
			}
			set
			{
				if ((this._TASK_START != value))
				{
					this.OnTASK_STARTChanging(value);
					this.SendPropertyChanging();
					this._TASK_START = value;
					this.SendPropertyChanged("TASK_START");
					this.OnTASK_STARTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TASK_DELIVERY_DATE", DbType="DateTime")]
		public System.Nullable<System.DateTime> TASK_DELIVERY_DATE
		{
			get
			{
				return this._TASK_DELIVERY_DATE;
			}
			set
			{
				if ((this._TASK_DELIVERY_DATE != value))
				{
					this.OnTASK_DELIVERY_DATEChanging(value);
					this.SendPropertyChanging();
					this._TASK_DELIVERY_DATE = value;
					this.SendPropertyChanged("TASK_DELIVERY_DATE");
					this.OnTASK_DELIVERY_DATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TASK_STATE", DbType="Int NOT NULL")]
		public int TASK_STATE
		{
			get
			{
				return this._TASK_STATE;
			}
			set
			{
				if ((this._TASK_STATE != value))
				{
					if (this._STATES.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTASK_STATEChanging(value);
					this.SendPropertyChanging();
					this._TASK_STATE = value;
					this.SendPropertyChanged("TASK_STATE");
					this.OnTASK_STATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STATES_TASKS", Storage="_STATES", ThisKey="TASK_STATE", OtherKey="ID", IsForeignKey=true)]
		public STATES STATES
		{
			get
			{
				return this._STATES.Entity;
			}
			set
			{
				STATES previousValue = this._STATES.Entity;
				if (((previousValue != value) 
							|| (this._STATES.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._STATES.Entity = null;
						previousValue.TASKS.Remove(this);
					}
					this._STATES.Entity = value;
					if ((value != null))
					{
						value.TASKS.Add(this);
						this._TASK_STATE = value.ID;
					}
					else
					{
						this._TASK_STATE = default(int);
					}
					this.SendPropertyChanged("STATES");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USERS_TASKS", Storage="_USERS", ThisKey="EMPLOYEE_ID", OtherKey="ID", IsForeignKey=true)]
		public USERS USERS
		{
			get
			{
				return this._USERS.Entity;
			}
			set
			{
				USERS previousValue = this._USERS.Entity;
				if (((previousValue != value) 
							|| (this._USERS.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USERS.Entity = null;
						previousValue.TASKS.Remove(this);
					}
					this._USERS.Entity = value;
					if ((value != null))
					{
						value.TASKS.Add(this);
						this._EMPLOYEE_ID = value.ID;
					}
					else
					{
						this._EMPLOYEE_ID = default(int);
					}
					this.SendPropertyChanged("USERS");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
